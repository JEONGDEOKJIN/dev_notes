// import React, { useState } from "react";
// import styles from "./password.module.css";
// import { FormProvider, useForm } from "react-hook-form";
// import { useHistory } from "react-router-dom";

// type FindPasswordFormData = {
//   findPassword_name: string;
//   findPassword_email: string;
//   findPassword_authCode: string;
// };

// import {
//   IonButton,
//   IonContent,
//   IonHeader,
//   IonInput,
//   IonPage,
//   IonTitle,
//   IonToolbar,
//   IonItem,
//   IonAlert,
// } from "@ionic/react";
// import AuthService from "@/src/services/AuthService";
// import { validateAuthCodePattern, validateEmail, validateName } from "@/src/lib/valid";

// const FindEmailPage: React.FC = () => {
//   const history = useHistory();

//   const [isTouched, setIsTouched] = useState(false);
//   const [isAlertOpen, setIsAlertOpen] = useState<boolean>(false);
//   const [alertHeader, setAlertHeader] = useState<string>("");
//   const [alerSubHeader, setAlertSubHeader] = useState<string>("");
//   const [alertMessage, setAlertMessage] = useState<string>("");

//   const [isValid, setIsValid] = useState<boolean>();
//   const [isEmailValid, setIsEmailValid] = useState<boolean>();
//   const [isNameValid, setIsNameValid] = useState<boolean>();
//   const [isAuthCodeValid, setIsAuthCodeValid] = useState<boolean>();
//   const [isAuthCodePatternValid, setIsAuthCodePatternValid] = useState<boolean>();

//   const form = useForm<FindPasswordFormData>({
//     mode: "onChange",
//     defaultValues: {
//       findPassword_name: "",
//       findPassword_email: "",
//       findPassword_authCode: "",
//     },
//     shouldFocusError: false,
//   });

//   const handleLogin = () => {
//     history.push("/main");
//   };

//   const { formState, register, getValues } = form;

//   const onSubmit = async (formData: any) => {
//     try {
//       const response = await AuthService.postUserFindPasswordResult(formData);
//       const { data } = response.data;
//     } catch (e: any) {
//       setIsAlertOpen(true); // alert Ï∞Ω Ïó¥Í∏∞
//       setAlertHeader("Î°úÍ∑∏Ïù∏");
//       setAlertMessage(e.response.data.message); // Î∞±ÏóîÎìúÏóêÏÑú Î≥¥ÎÇ¥Ï£ºÎäî ÏóêÎü¨ Î©îÏãúÏßÄ
//     }
//   };

//   const onError = (error: any) => {
//     const key = Object.keys(error)[0];
//     console.log(error[key].message);
//   };

//   const markTouched = () => {
//     setIsTouched(true);
//   };

//   // Ï†ÑÏ≤¥ form ÌïÑÎìú Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
//   const validate = (ev: Event, type: string) => {
//     const value = (ev.target as HTMLInputElement).value;
//     setIsValid(undefined);

//     if (value === "") return;

//     if (type === "findPassword_name") {
//       validateName(value) === true ? setIsNameValid(true) : setIsNameValid(false);
//     }
//     if (type === "findPassword_email") {
//       validateEmail(value) === true ? setIsEmailValid(true) : setIsEmailValid(false);
//     }
//     if (type === "findPassword_authCode") {
//       validateAuthCodePattern(value) === true ? setIsAuthCodePatternValid(true) : setIsAuthCodePatternValid(false);
//     }
//   };

//   return (
//     <IonPage>
//       <IonHeader>
//         <IonToolbar>
//           <IonTitle>ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞</IonTitle>
//         </IonToolbar>
//       </IonHeader>
//       {/* alert Í≤ΩÍ≥†Ï∞Ω */}
//       <IonAlert
//         isOpen={isAlertOpen}
//         header={alertHeader}
//         subHeader={alerSubHeader}
//         message={alertMessage}
//         buttons={["ÌôïÏù∏"]}
//         onDidDismiss={() => setIsAlertOpen(false)}
//       ></IonAlert>
//       <IonContent className="ion-padding">
//         <FormProvider {...form}>
//           <form onSubmit={form.handleSubmit(onSubmit, onError)}>
//             <IonInput
//               className={`${isNameValid && "ion-valid"} ${
//                 isNameValid === false && "ion-invalid"
//               } ${isTouched && "ion-touched"}`} // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî | ‚ùì Ïù¥Í±∞ ion-touched Ïù¥Í±∞Ïóê ÎåÄÌïú CSS Ï†ïÏùòÎäî Ïñ¥Îî®ÏßÄ?
//               // label="Outline input" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//               // labelPlacement="floating" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//               // fill="solid" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//               placeholder="Ïù¥Î¶Ñ"
//               helperText={isNameValid ? "valid name" : "Enter a valid NAME"} // [ÏÑ§Î™Ö] Î∞ëÏ§Ñ Î∞ëÏóê ÎÇòÏò§Îäî ÏÑ§Î™Ö
//               type="text"
//               errorText="Ïù¥Î¶ÑÏùÄ 15Í∏ÄÏûê ÎØ∏Îßåüìõüìõ" // ÏóêÎü¨ Î©îÏãúÏßÄ
//               onIonInput={(event) => validate(event, "register_name")}
//               onIonBlur={() => markTouched()}
//               {...register("findPassword_name", { required: true })}
//             />

//             <article className={styles.article_wrap}>
//               <IonInput
//                 className={`${isEmailValid && "ion-valid"} ${
//                   isEmailValid === false && "ion-invalid"
//                 } ${isTouched && "ion-touched"}`} // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî | ‚ùì Ïù¥Í±∞ ion-touched Ïù¥Í±∞Ïóê ÎåÄÌïú CSS Ï†ïÏùòÎäî Ïñ¥Îî®ÏßÄ?
//                 // label="Outline input" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//                 // labelPlacement="floating" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//                 // fill="solid" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//                 placeholder="Ïù¥Î©îÏùº Ï£ºÏÜå"
//                 helperText={isEmailValid ? "valid email" : "Enter a valid EMAIL"} // [ÏÑ§Î™Ö] Î∞ëÏ§Ñ Î∞ëÏóê ÎÇòÏò§Îäî ÏÑ§Î™Ö
//                 type="email"
//                 errorText="Ïù¥Î©îÏùº ÌòïÏãùÏùÑ ÎßûÏ∂∞Ï£ºÏÑ∏Ïöî üìõüìõ" // ÏóêÎü¨ Î©îÏãúÏßÄ
//                 onIonInput={(event) => validate(event, "register_email")}
//                 onIonBlur={() => markTouched()}
//                 {...register("findPassword_email", { required: true })}
//               />

//               <IonButton
//                 type="button"
//                 // disabled Ï°∞Í±¥ Ï≤¥ÌÅ¨
//                 // disabled={!authCodeButtonOpen || isAuthCodeValid} // [‚úÖTODO] Ïù∏Ï¶ùÎ≤àÌò∏ ÌôïÏù∏ ÏºúÏßÄÎäî ÏàúÍ∞ÑÏù¥ Ïù∏Ï¶ùÎ©îÏùº Î≥¥ÎÇ¥Í≥† Î∞õÏïòÏùÑ Îïå!
//                 // onClick={() => checkAuthCode(getValues("register_authCode"))}
//               >
//                 {isAuthCodeValid ? "Ïù∏Ï¶ù ÏôÑÎ£å" : "Ïù∏Ï¶ùÎ≤àÌò∏ Î≥¥ÎÇ¥Í∏∞"}
//               </IonButton>
//             </article>

//             <IonInput
//               className={`${isAuthCodePatternValid && "ion-valid"} ${
//                 isAuthCodePatternValid === false && "ion-invalid"
//               } ${isTouched && "ion-touched"}`} // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî | ‚ùì Ïù¥Í±∞ ion-touched Ïù¥Í±∞Ïóê ÎåÄÌïú CSS Ï†ïÏùòÎäî Ïñ¥Îî®ÏßÄ?
//               // label="Outline input" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//               // labelPlacement="floating" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//               // fill="solid" // [‚úÖTODO] ÎîîÏûêÏù∏ ÏàòÏ†ï ÌïÑÏöî
//               placeholder="Ïù∏Ï¶ùÏΩîÎìú ÏûÖÎ†•"
//               helperText={isAuthCodePatternValid ? "valid Ïù∏Ï¶ùÎ≤àÌò∏(ÏûëÏÑ±ÏÑ±Í≥µ)üîµ" : "(ÏûëÏÑ±Ï§ë) Enter a valid Ïù∏Ï¶ùÎ≤àÌò∏"} // [ÏÑ§Î™Ö] Î∞ëÏ§Ñ Î∞ëÏóê ÎÇòÏò§Îäî ÏÑ§Î™Ö
//               type="text"
//               errorText="Ïù∏Ï¶ùÎ≤àÌò∏ ÌòïÏãùÏùÑ ÎßûÏ∂∞Ï£ºÏÑ∏Ïöî üìõüìõ" // ÏóêÎü¨ Î©îÏãúÏßÄ
//               onIonInput={(event) => validate(event, "register_authCode")}
//               onIonBlur={() => markTouched()}
//               {...register("findPassword_authCode", { required: true })}
//             />

//             <IonButton expand="block" onClick={() => history.goBack()}>
//               Ï∑®ÏÜå
//             </IonButton>
//             <IonButton expand="block" onClick={handleLogin}>
//               ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞üôå
//             </IonButton>
//           </form>
//         </FormProvider>
//       </IonContent>
//     </IonPage>
//   );
// };

// export default FindEmailPage;
